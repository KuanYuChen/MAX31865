; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\spi_flash.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IE:\keli\ARM\RV31\INC -IE:\keli\ARM\CMSIS\Include -IE:\keli\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\spi_flash.crf ..\bsp_lib\spi_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_Init PROC
;;;49     *******************************************************************************/
;;;50     void SPI_FLASH_Init(void)
000000  b500              PUSH     {lr}
;;;51     {
000002  b087              SUB      sp,sp,#0x1c
;;;52       SPI_InitTypeDef  SPI_InitStructure;
;;;53       GPIO_InitTypeDef GPIO_InitStructure;
;;;54     
;;;55       /* Enable SPI1 and GPIO clocks */
;;;56       RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_GPIOA |
000004  2101              MOVS     r1,#1
000006  f2410004          MOV      r0,#0x1004
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;57                              RCC_APB2Periph_GPIO_CS, ENABLE);
;;;58     
;;;59       /* Configure SPI1 pins: SCK, MISO and MOSI */
;;;60       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
00000e  20e0              MOVS     r0,#0xe0
000010  f8ad0004          STRH     r0,[sp,#4]
;;;61       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000014  2018              MOVS     r0,#0x18
000016  f88d0007          STRB     r0,[sp,#7]
;;;62       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0006          STRB     r0,[sp,#6]
;;;63       GPIO_Init(GPIOA, &GPIO_InitStructure);
000020  a901              ADD      r1,sp,#4
000022  48ea              LDR      r0,|L1.972|
000024  f7fffffe          BL       GPIO_Init
;;;64     
;;;65       /* Configure I/O for Flash Chip select */
;;;66       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS;
000028  2010              MOVS     r0,#0x10
00002a  f8ad0004          STRH     r0,[sp,#4]
;;;67       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00002e  f88d0007          STRB     r0,[sp,#7]
;;;68       GPIO_Init(GPIO_CS, &GPIO_InitStructure);
000032  a901              ADD      r1,sp,#4
000034  48e5              LDR      r0,|L1.972|
000036  f7fffffe          BL       GPIO_Init
;;;69     
;;;70       /* Deselect the FLASH: Chip Select high */
;;;71       SPI_FLASH_CS_HIGH();
00003a  2110              MOVS     r1,#0x10
00003c  48e3              LDR      r0,|L1.972|
00003e  f7fffffe          BL       GPIO_SetBits
;;;72     
;;;73       /* SPI1 configuration */
;;;74       SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000042  2000              MOVS     r0,#0
000044  f8ad0008          STRH     r0,[sp,#8]
;;;75       SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000048  f44f7082          MOV      r0,#0x104
00004c  f8ad000a          STRH     r0,[sp,#0xa]
;;;76       SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000050  2000              MOVS     r0,#0
000052  f8ad000c          STRH     r0,[sp,#0xc]
;;;77       SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
000056  2002              MOVS     r0,#2
000058  f8ad000e          STRH     r0,[sp,#0xe]
;;;78       SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
00005c  2001              MOVS     r0,#1
00005e  f8ad0010          STRH     r0,[sp,#0x10]
;;;79       SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000062  0240              LSLS     r0,r0,#9
000064  f8ad0012          STRH     r0,[sp,#0x12]
;;;80       SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
000068  2008              MOVS     r0,#8
00006a  f8ad0014          STRH     r0,[sp,#0x14]
;;;81       SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
00006e  2000              MOVS     r0,#0
000070  f8ad0016          STRH     r0,[sp,#0x16]
;;;82       SPI_InitStructure.SPI_CRCPolynomial = 7;
000074  2007              MOVS     r0,#7
000076  f8ad0018          STRH     r0,[sp,#0x18]
;;;83       SPI_Init(SPI1, &SPI_InitStructure);
00007a  a902              ADD      r1,sp,#8
00007c  48d4              LDR      r0,|L1.976|
00007e  f7fffffe          BL       SPI_Init
;;;84     
;;;85       /* Enable SPI1  */
;;;86       SPI_Cmd(SPI1, ENABLE);
000082  2101              MOVS     r1,#1
000084  48d2              LDR      r0,|L1.976|
000086  f7fffffe          BL       SPI_Cmd
;;;87     }
00008a  b007              ADD      sp,sp,#0x1c
00008c  bd00              POP      {pc}
;;;88     
                          ENDP

                  SPI_FLASH_SendByte PROC
;;;378    *******************************************************************************/
;;;379    u8 SPI_FLASH_SendByte(u8 byte)//Ð´×Ö½Ú
00008e  b510              PUSH     {r4,lr}
;;;380    {
000090  4604              MOV      r4,r0
;;;381      /* Loop while DR register in not emplty */
;;;382      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000092  bf00              NOP      
                  |L1.148|
000094  2102              MOVS     r1,#2
000096  48ce              LDR      r0,|L1.976|
000098  f7fffffe          BL       SPI_I2S_GetFlagStatus
00009c  2800              CMP      r0,#0
00009e  d0f9              BEQ      |L1.148|
;;;383    
;;;384      /* Send byte through the SPI1 peripheral */
;;;385      SPI_I2S_SendData(SPI1, byte);
0000a0  4621              MOV      r1,r4
0000a2  48cb              LDR      r0,|L1.976|
0000a4  f7fffffe          BL       SPI_I2S_SendData
;;;386    
;;;387      /* Wait to receive a byte */
;;;388      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
0000a8  bf00              NOP      
                  |L1.170|
0000aa  2101              MOVS     r1,#1
0000ac  48c8              LDR      r0,|L1.976|
0000ae  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000b2  2800              CMP      r0,#0
0000b4  d0f9              BEQ      |L1.170|
;;;389    
;;;390      /* Return the byte read from the SPI bus */
;;;391      return SPI_I2S_ReceiveData(SPI1);
0000b6  48c6              LDR      r0,|L1.976|
0000b8  f7fffffe          BL       SPI_I2S_ReceiveData
0000bc  b2c0              UXTB     r0,r0
;;;392    }
0000be  bd10              POP      {r4,pc}
;;;393    
                          ENDP

                  SPI_FLASH_WaitForWriteEnd PROC
;;;425    *******************************************************************************/
;;;426    void SPI_FLASH_WaitForWriteEnd(void)//µÈ´ýÐ´½áÊø
0000c0  b510              PUSH     {r4,lr}
;;;427    {
;;;428      u8 FLASH_Status = 0;
0000c2  2400              MOVS     r4,#0
;;;429    
;;;430      /* Select the FLASH: Chip Select low */
;;;431      SPI_FLASH_CS_LOW();
0000c4  2110              MOVS     r1,#0x10
0000c6  48c1              LDR      r0,|L1.972|
0000c8  f7fffffe          BL       GPIO_ResetBits
;;;432    
;;;433      /* Send "Read Status Register" instruction */
;;;434      SPI_FLASH_SendByte(RDSR);
0000cc  20d7              MOVS     r0,#0xd7
0000ce  f7fffffe          BL       SPI_FLASH_SendByte
;;;435    
;;;436      /* Loop as long as the memory is busy with a write cycle */
;;;437      do
0000d2  bf00              NOP      
                  |L1.212|
;;;438      {
;;;439        /* Send a dummy byte to generate the clock needed by the FLASH
;;;440        and put the value of the status register in FLASH_Status variable */
;;;441        FLASH_Status = SPI_FLASH_SendByte(Dummy_Byte);
0000d4  20a5              MOVS     r0,#0xa5
0000d6  f7fffffe          BL       SPI_FLASH_SendByte
0000da  4604              MOV      r4,r0
;;;442    
;;;443      }
;;;444      while ((FLASH_Status & BUSY_Flag) == RESET); /* Write in progress */
0000dc  f0140f80          TST      r4,#0x80
0000e0  d0f8              BEQ      |L1.212|
;;;445    
;;;446      /* Deselect the FLASH: Chip Select high */
;;;447      SPI_FLASH_CS_HIGH();
0000e2  2110              MOVS     r1,#0x10
0000e4  48b9              LDR      r0,|L1.972|
0000e6  f7fffffe          BL       GPIO_SetBits
;;;448    }
0000ea  bd10              POP      {r4,pc}
;;;449    
                          ENDP

                  SPI_FLASH_PageErase PROC
;;;99     *******************************************************************************/
;;;100    void SPI_FLASH_PageErase(u32 PageAddr)//Ò³Ãæ²Á³ýº¯Êý
0000ec  b510              PUSH     {r4,lr}
;;;101    {
0000ee  4604              MOV      r4,r0
;;;102      /* Sector Erase */
;;;103      /* Select the FLASH: Chip Select low */
;;;104      SPI_FLASH_CS_LOW();
0000f0  2110              MOVS     r1,#0x10
0000f2  48b6              LDR      r0,|L1.972|
0000f4  f7fffffe          BL       GPIO_ResetBits
;;;105      /* Send Sector Erase instruction */
;;;106      SPI_FLASH_SendByte(PE);
0000f8  2081              MOVS     r0,#0x81
0000fa  f7fffffe          BL       SPI_FLASH_SendByte
;;;107      /* Send SectorAddr high nibble address byte */
;;;108      SPI_FLASH_SendByte((PageAddr & 0xFF0000) >> 16);
0000fe  f3c44007          UBFX     r0,r4,#16,#8
000102  f7fffffe          BL       SPI_FLASH_SendByte
;;;109      /* Send SectorAddr medium nibble address byte */
;;;110      SPI_FLASH_SendByte((PageAddr & 0xFF00) >> 8);
000106  f3c42007          UBFX     r0,r4,#8,#8
00010a  f7fffffe          BL       SPI_FLASH_SendByte
;;;111      /* Send SectorAddr low nibble address byte */
;;;112      SPI_FLASH_SendByte(PageAddr & 0xFF);
00010e  b2e0              UXTB     r0,r4
000110  f7fffffe          BL       SPI_FLASH_SendByte
;;;113      /* Deselect the FLASH: Chip Select high */
;;;114      SPI_FLASH_CS_HIGH();
000114  2110              MOVS     r1,#0x10
000116  48ad              LDR      r0,|L1.972|
000118  f7fffffe          BL       GPIO_SetBits
;;;115    
;;;116      /* Wait the end of Flash writing */
;;;117      SPI_FLASH_WaitForWriteEnd();
00011c  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;118    }
000120  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  SPI_FLASH_BulkErase PROC
;;;126    *******************************************************************************/
;;;127    void SPI_FLASH_BulkErase(void)//ÈÝÁ¿²Á³ý
000122  b510              PUSH     {r4,lr}
;;;128    {
;;;129      /* Bulk Erase */
;;;130      /* Select the FLASH: Chip Select low */
;;;131      SPI_FLASH_CS_LOW();
000124  2110              MOVS     r1,#0x10
000126  48a9              LDR      r0,|L1.972|
000128  f7fffffe          BL       GPIO_ResetBits
;;;132      /* Send Bulk Erase instruction  */
;;;133      SPI_FLASH_SendByte(BE1);
00012c  20c7              MOVS     r0,#0xc7
00012e  f7fffffe          BL       SPI_FLASH_SendByte
;;;134      /* Send Bulk Erase instruction  */
;;;135      SPI_FLASH_SendByte(BE2);
000132  2094              MOVS     r0,#0x94
000134  f7fffffe          BL       SPI_FLASH_SendByte
;;;136      /* Send Bulk Erase instruction  */
;;;137      SPI_FLASH_SendByte(BE3);
000138  2080              MOVS     r0,#0x80
00013a  f7fffffe          BL       SPI_FLASH_SendByte
;;;138      /* Send Bulk Erase instruction  */
;;;139      SPI_FLASH_SendByte(BE4);
00013e  209a              MOVS     r0,#0x9a
000140  f7fffffe          BL       SPI_FLASH_SendByte
;;;140      /* Deselect the FLASH: Chip Select high */
;;;141      SPI_FLASH_CS_HIGH();
000144  2110              MOVS     r1,#0x10
000146  48a1              LDR      r0,|L1.972|
000148  f7fffffe          BL       GPIO_SetBits
;;;142    
;;;143      /* Wait the end of Flash writing */
;;;144      SPI_FLASH_WaitForWriteEnd();
00014c  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;145    }
000150  bd10              POP      {r4,pc}
;;;146    
                          ENDP

                  SPI_FLASH_PageWrite PROC
;;;159    *******************************************************************************/
;;;160    void SPI_FLASH_PageWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)//Ð´Ò³Ãæ
000152  b570              PUSH     {r4-r6,lr}
;;;161    {
000154  4605              MOV      r5,r0
000156  460c              MOV      r4,r1
000158  4616              MOV      r6,r2
;;;162      /* Select the FLASH: Chip Select low */
;;;163      SPI_FLASH_CS_LOW();
00015a  2110              MOVS     r1,#0x10
00015c  489b              LDR      r0,|L1.972|
00015e  f7fffffe          BL       GPIO_ResetBits
;;;164      /* Send "Write to Memory " instruction */
;;;165      SPI_FLASH_SendByte(WRITE);
000162  2082              MOVS     r0,#0x82
000164  f7fffffe          BL       SPI_FLASH_SendByte
;;;166      /* Send WriteAddr high nibble address byte to write to */
;;;167      SPI_FLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
000168  f3c44007          UBFX     r0,r4,#16,#8
00016c  f7fffffe          BL       SPI_FLASH_SendByte
;;;168      /* Send WriteAddr medium nibble address byte to write to */
;;;169      SPI_FLASH_SendByte((WriteAddr & 0xFF00) >> 8);
000170  f3c42007          UBFX     r0,r4,#8,#8
000174  f7fffffe          BL       SPI_FLASH_SendByte
;;;170      /* Send WriteAddr low nibble address byte to write to */
;;;171      SPI_FLASH_SendByte(WriteAddr & 0xFF);
000178  b2e0              UXTB     r0,r4
00017a  f7fffffe          BL       SPI_FLASH_SendByte
;;;172    
;;;173      /* while there is data to be written on the FLASH */
;;;174      while (NumByteToWrite--)
00017e  e003              B        |L1.392|
                  |L1.384|
;;;175      {
;;;176        /* Send the current byte */
;;;177        SPI_FLASH_SendByte(*pBuffer);
000180  7828              LDRB     r0,[r5,#0]
000182  f7fffffe          BL       SPI_FLASH_SendByte
;;;178        /* Point on the next byte to be written */
;;;179        pBuffer++;
000186  1c6d              ADDS     r5,r5,#1
                  |L1.392|
000188  0030              MOVS     r0,r6                 ;174
00018a  f1a60101          SUB      r1,r6,#1              ;174
00018e  b28e              UXTH     r6,r1                 ;174
000190  d1f6              BNE      |L1.384|
;;;180      }
;;;181    
;;;182      /* Deselect the FLASH: Chip Select high */
;;;183      SPI_FLASH_CS_HIGH();
000192  2110              MOVS     r1,#0x10
000194  488d              LDR      r0,|L1.972|
000196  f7fffffe          BL       GPIO_SetBits
;;;184    
;;;185      /* Wait the end of Flash writing */
;;;186      SPI_FLASH_WaitForWriteEnd();
00019a  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;187    }
00019e  bd70              POP      {r4-r6,pc}
;;;188    /*******************************************************************************
                          ENDP

                  SPI_FLASH_BufferWrite PROC
;;;198    *******************************************************************************/
;;;199    void SPI_FLASH_BufferWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)//Íù¼Ä´æÆ÷Ð´Êý¾Ý
0001a0  e92d5ff0          PUSH     {r4-r12,lr}
;;;200    {
0001a4  4607              MOV      r7,r0
0001a6  460e              MOV      r6,r1
0001a8  4614              MOV      r4,r2
;;;201      u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
0001aa  f04f0800          MOV      r8,#0
0001ae  46c1              MOV      r9,r8
0001b0  46c2              MOV      r10,r8
0001b2  2500              MOVS     r5,#0
0001b4  46ab              MOV      r11,r5
;;;202    
;;;203      Addr = WriteAddr % SPI_FLASH_PageSize;
0001b6  f0060aff          AND      r10,r6,#0xff
;;;204      count = SPI_FLASH_PageSize - Addr;
0001ba  f1ca0000          RSB      r0,r10,#0
0001be  b2c5              UXTB     r5,r0
;;;205      NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
0001c0  4620              MOV      r0,r4
0001c2  17e1              ASRS     r1,r4,#31
0001c4  eb0451d1          ADD      r1,r4,r1,LSR #23
0001c8  f3c12847          UBFX     r8,r1,#9,#8
;;;206      NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
0001cc  17e1              ASRS     r1,r4,#31
0001ce  eb0451d1          ADD      r1,r4,r1,LSR #23
0001d2  1249              ASRS     r1,r1,#9
0001d4  eba42141          SUB      r1,r4,r1,LSL #9
0001d8  f00109ff          AND      r9,r1,#0xff
;;;207    
;;;208      if (Addr == 0) /* WriteAddr is SPI_FLASH_PageSize aligned  */
0001dc  f1ba0f00          CMP      r10,#0
0001e0  d120              BNE      |L1.548|
;;;209      {
;;;210        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */
0001e2  f1b80f00          CMP      r8,#0
0001e6  d105              BNE      |L1.500|
;;;211        {
;;;212          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
0001e8  4622              MOV      r2,r4
0001ea  4631              MOV      r1,r6
0001ec  4638              MOV      r0,r7
0001ee  f7fffffe          BL       SPI_FLASH_PageWrite
0001f2  e064              B        |L1.702|
                  |L1.500|
;;;213        }
;;;214        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;215        {
;;;216          while (NumOfPage--)
0001f4  e009              B        |L1.522|
                  |L1.502|
;;;217          {
;;;218            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
0001f6  f44f7200          MOV      r2,#0x200
0001fa  4631              MOV      r1,r6
0001fc  4638              MOV      r0,r7
0001fe  f7fffffe          BL       SPI_FLASH_PageWrite
;;;219            WriteAddr +=  SPI_FLASH_PageSize;
000202  f5067600          ADD      r6,r6,#0x200
;;;220            pBuffer += SPI_FLASH_PageSize;
000206  f5077700          ADD      r7,r7,#0x200
                  |L1.522|
00020a  ea5f0008          MOVS     r0,r8                 ;216
00020e  f1a80101          SUB      r1,r8,#1              ;216
000212  f00108ff          AND      r8,r1,#0xff           ;216
000216  d1ee              BNE      |L1.502|
;;;221          }
;;;222    
;;;223          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
000218  464a              MOV      r2,r9
00021a  4631              MOV      r1,r6
00021c  4638              MOV      r0,r7
00021e  f7fffffe          BL       SPI_FLASH_PageWrite
000222  e04c              B        |L1.702|
                  |L1.548|
;;;224        }
;;;225      }
;;;226      else /* WriteAddr is not SPI_FLASH_PageSize aligned  */
;;;227      {
;;;228        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */
000224  f1b80f00          CMP      r8,#0
000228  d118              BNE      |L1.604|
;;;229        {
;;;230          if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > SPI_FLASH_PageSize */
00022a  45a9              CMP      r9,r5
00022c  dd10              BLE      |L1.592|
;;;231          {
;;;232            temp = NumOfSingle - count;
00022e  eba90005          SUB      r0,r9,r5
000232  f0000bff          AND      r11,r0,#0xff
;;;233    
;;;234            SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
000236  462a              MOV      r2,r5
000238  4631              MOV      r1,r6
00023a  4638              MOV      r0,r7
00023c  f7fffffe          BL       SPI_FLASH_PageWrite
;;;235            WriteAddr +=  count;
000240  442e              ADD      r6,r6,r5
;;;236            pBuffer += count;
000242  442f              ADD      r7,r7,r5
;;;237    
;;;238            SPI_FLASH_PageWrite(pBuffer, WriteAddr, temp);
000244  465a              MOV      r2,r11
000246  4631              MOV      r1,r6
000248  4638              MOV      r0,r7
00024a  f7fffffe          BL       SPI_FLASH_PageWrite
00024e  e036              B        |L1.702|
                  |L1.592|
;;;239          }
;;;240          else
;;;241          {
;;;242            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
000250  4622              MOV      r2,r4
000252  4631              MOV      r1,r6
000254  4638              MOV      r0,r7
000256  f7fffffe          BL       SPI_FLASH_PageWrite
00025a  e030              B        |L1.702|
                  |L1.604|
;;;243          }
;;;244        }
;;;245        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;246        {
;;;247          NumByteToWrite -= count;
00025c  1b60              SUBS     r0,r4,r5
00025e  b284              UXTH     r4,r0
;;;248          NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
000260  4620              MOV      r0,r4
000262  17e1              ASRS     r1,r4,#31
000264  eb0451d1          ADD      r1,r4,r1,LSR #23
000268  ea4f2861          ASR      r8,r1,#9
;;;249          NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
00026c  17e1              ASRS     r1,r4,#31
00026e  eb0451d1          ADD      r1,r4,r1,LSR #23
000272  1249              ASRS     r1,r1,#9
000274  eba42141          SUB      r1,r4,r1,LSL #9
000278  f00109ff          AND      r9,r1,#0xff
;;;250    
;;;251          SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
00027c  462a              MOV      r2,r5
00027e  4631              MOV      r1,r6
000280  4638              MOV      r0,r7
000282  f7fffffe          BL       SPI_FLASH_PageWrite
;;;252          WriteAddr +=  count;
000286  442e              ADD      r6,r6,r5
;;;253          pBuffer += count;
000288  442f              ADD      r7,r7,r5
;;;254    
;;;255          while (NumOfPage--)
00028a  e009              B        |L1.672|
                  |L1.652|
;;;256          {
;;;257            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
00028c  f44f7200          MOV      r2,#0x200
000290  4631              MOV      r1,r6
000292  4638              MOV      r0,r7
000294  f7fffffe          BL       SPI_FLASH_PageWrite
;;;258            WriteAddr +=  SPI_FLASH_PageSize;
000298  f5067600          ADD      r6,r6,#0x200
;;;259            pBuffer += SPI_FLASH_PageSize;
00029c  f5077700          ADD      r7,r7,#0x200
                  |L1.672|
0002a0  ea5f0008          MOVS     r0,r8                 ;255
0002a4  f1a80101          SUB      r1,r8,#1              ;255
0002a8  f00108ff          AND      r8,r1,#0xff           ;255
0002ac  d1ee              BNE      |L1.652|
;;;260          }
;;;261    
;;;262          if (NumOfSingle != 0)
0002ae  f1b90f00          CMP      r9,#0
0002b2  d004              BEQ      |L1.702|
;;;263          {
;;;264            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
0002b4  464a              MOV      r2,r9
0002b6  4631              MOV      r1,r6
0002b8  4638              MOV      r0,r7
0002ba  f7fffffe          BL       SPI_FLASH_PageWrite
                  |L1.702|
;;;265          }
;;;266        }
;;;267      }
;;;268    }
0002be  e8bd9ff0          POP      {r4-r12,pc}
;;;269    
                          ENDP

                  SPI_FLASH_BufferRead PROC
;;;279    *******************************************************************************/
;;;280    void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)//´Ó¼Ä´æÆ÷¶ÁÊý¾Ý
0002c2  e92d41f0          PUSH     {r4-r8,lr}
;;;281    {
0002c6  4604              MOV      r4,r0
0002c8  460d              MOV      r5,r1
0002ca  4616              MOV      r6,r2
;;;282    	u16  Byte=0,Page=0;
0002cc  2700              MOVS     r7,#0
0002ce  46b8              MOV      r8,r7
;;;283    	Byte =  ReadAddr % SPI_FLASH_PageSize;
0002d0  f3c50708          UBFX     r7,r5,#0,#9
;;;284        Page =  ReadAddr / SPI_FLASH_PageSize ;
0002d4  f3c5284f          UBFX     r8,r5,#9,#16
;;;285    
;;;286      /* Select the FLASH: Chip Select low */
;;;287      SPI_FLASH_CS_LOW();
0002d8  2110              MOVS     r1,#0x10
0002da  483c              LDR      r0,|L1.972|
0002dc  f7fffffe          BL       GPIO_ResetBits
;;;288    
;;;289      /* Send "Read from Memory " instruction */
;;;290      SPI_FLASH_SendByte(0xe8);
0002e0  20e8              MOVS     r0,#0xe8
0002e2  f7fffffe          BL       SPI_FLASH_SendByte
;;;291    
;;;292      /* Send ReadAddr high nibble address byte to read from */
;;;293      SPI_FLASH_SendByte((u8)(Page >> 6));
0002e6  f3c81087          UBFX     r0,r8,#6,#8
0002ea  f7fffffe          BL       SPI_FLASH_SendByte
;;;294      /* Send ReadAddr medium nibble address byte to read from */
;;;295      SPI_FLASH_SendByte((u8)((Page<<2) | ( Byte>>8)));
0002ee  ea4f0188          LSL      r1,r8,#2
0002f2  ea412127          ORR      r1,r1,r7,ASR #8
0002f6  b2c8              UXTB     r0,r1
0002f8  f7fffffe          BL       SPI_FLASH_SendByte
;;;296      /* Send ReadAddr low nibble address byte to read from */
;;;297      SPI_FLASH_SendByte((u8)Byte);
0002fc  b2f8              UXTB     r0,r7
0002fe  f7fffffe          BL       SPI_FLASH_SendByte
;;;298    
;;;299      /* Send a dummy byte to generate the clock needed by the FLASH */
;;;300      SPI_FLASH_SendByte(Dummy_Byte);
000302  20a5              MOVS     r0,#0xa5
000304  f7fffffe          BL       SPI_FLASH_SendByte
;;;301      /* Send a dummy byte to generate the clock needed by the FLASH */
;;;302      SPI_FLASH_SendByte(Dummy_Byte);
000308  20a5              MOVS     r0,#0xa5
00030a  f7fffffe          BL       SPI_FLASH_SendByte
;;;303      /* Send a dummy byte to generate the clock needed by the FLASH */
;;;304      SPI_FLASH_SendByte(Dummy_Byte);
00030e  20a5              MOVS     r0,#0xa5
000310  f7fffffe          BL       SPI_FLASH_SendByte
;;;305      /* Send a dummy byte to generate the clock needed by the FLASH */
;;;306      SPI_FLASH_SendByte(Dummy_Byte);
000314  20a5              MOVS     r0,#0xa5
000316  f7fffffe          BL       SPI_FLASH_SendByte
;;;307    
;;;308      while (NumByteToRead--) /* while there is data to be read */
00031a  e004              B        |L1.806|
                  |L1.796|
;;;309      {
;;;310        /* Read a byte from the FLASH */
;;;311        *pBuffer = SPI_FLASH_SendByte(Dummy_Byte);
00031c  20a5              MOVS     r0,#0xa5
00031e  f7fffffe          BL       SPI_FLASH_SendByte
000322  7020              STRB     r0,[r4,#0]
;;;312        /* Point to the next location where the byte read will be saved */
;;;313        pBuffer++;
000324  1c64              ADDS     r4,r4,#1
                  |L1.806|
000326  0030              MOVS     r0,r6                 ;308
000328  f1a60101          SUB      r1,r6,#1              ;308
00032c  b28e              UXTH     r6,r1                 ;308
00032e  d1f5              BNE      |L1.796|
;;;314      }
;;;315    
;;;316      /* Deselect the FLASH: Chip Select high */
;;;317      SPI_FLASH_CS_HIGH();
000330  2110              MOVS     r1,#0x10
000332  4826              LDR      r0,|L1.972|
000334  f7fffffe          BL       GPIO_SetBits
;;;318    }
000338  e8bd81f0          POP      {r4-r8,pc}
;;;319    
                          ENDP

                  SPI_FLASH_ReadID PROC
;;;326    *******************************************************************************/
;;;327    u32 SPI_FLASH_ReadID(void)//¶ÁID
00033c  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {
;;;329      u32 Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0, Temp3;
000340  2400              MOVS     r4,#0
000342  2500              MOVS     r5,#0
000344  2600              MOVS     r6,#0
000346  2700              MOVS     r7,#0
;;;330    
;;;331      /* Select the FLASH: Chip Select low */
;;;332      SPI_FLASH_CS_LOW();
000348  2110              MOVS     r1,#0x10
00034a  4820              LDR      r0,|L1.972|
00034c  f7fffffe          BL       GPIO_ResetBits
;;;333    
;;;334      /* Send "RDID " instruction */
;;;335      SPI_FLASH_SendByte(0x9F);
000350  209f              MOVS     r0,#0x9f
000352  f7fffffe          BL       SPI_FLASH_SendByte
;;;336    
;;;337      /* Read a byte from the FLASH */
;;;338      Temp0 = SPI_FLASH_SendByte(Dummy_Byte);
000356  20a5              MOVS     r0,#0xa5
000358  f7fffffe          BL       SPI_FLASH_SendByte
00035c  4605              MOV      r5,r0
;;;339    
;;;340      /* Read a byte from the FLASH */
;;;341      Temp1 = SPI_FLASH_SendByte(Dummy_Byte);
00035e  20a5              MOVS     r0,#0xa5
000360  f7fffffe          BL       SPI_FLASH_SendByte
000364  4606              MOV      r6,r0
;;;342    
;;;343      /* Read a byte from the FLASH */
;;;344      Temp2 = SPI_FLASH_SendByte(Dummy_Byte);
000366  20a5              MOVS     r0,#0xa5
000368  f7fffffe          BL       SPI_FLASH_SendByte
00036c  4607              MOV      r7,r0
;;;345    
;;;346      /* Read a byte from the FLASH */
;;;347      Temp3 = SPI_FLASH_SendByte(Dummy_Byte);
00036e  20a5              MOVS     r0,#0xa5
000370  f7fffffe          BL       SPI_FLASH_SendByte
000374  4680              MOV      r8,r0
;;;348      
;;;349      /* Deselect the FLASH: Chip Select high */
;;;350      SPI_FLASH_CS_HIGH();
000376  2110              MOVS     r1,#0x10
000378  4814              LDR      r0,|L1.972|
00037a  f7fffffe          BL       GPIO_SetBits
;;;351    
;;;352      Temp = (Temp0 << 24) | (Temp1 << 16) | (Temp2<<8) | Temp3;
00037e  0628              LSLS     r0,r5,#24
000380  ea404006          ORR      r0,r0,r6,LSL #16
000384  ea402007          ORR      r0,r0,r7,LSL #8
000388  ea400408          ORR      r4,r0,r8
;;;353    
;;;354      return Temp;
00038c  4620              MOV      r0,r4
;;;355    }
00038e  e8bd81f0          POP      {r4-r8,pc}
;;;356    
                          ENDP

                  SPI_FLASH_ReadByte PROC
;;;365    *******************************************************************************/
;;;366    u8 SPI_FLASH_ReadByte(void)//¶Á×Ö½Ú
000392  b510              PUSH     {r4,lr}
;;;367    {
;;;368      return (SPI_FLASH_SendByte(Dummy_Byte));
000394  20a5              MOVS     r0,#0xa5
000396  f7fffffe          BL       SPI_FLASH_SendByte
;;;369    }
00039a  bd10              POP      {r4,pc}
;;;370    
                          ENDP

                  SPI_FLASH_SendHalfWord PROC
;;;401    *******************************************************************************/
;;;402    u16 SPI_FLASH_SendHalfWord(u16 HalfWord)//°ë×Ö½Ú·¢ËÍ
00039c  b510              PUSH     {r4,lr}
;;;403    {
00039e  4604              MOV      r4,r0
;;;404      /* Loop while DR register in not emplty */
;;;405      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
0003a0  bf00              NOP      
                  |L1.930|
0003a2  2102              MOVS     r1,#2
0003a4  480a              LDR      r0,|L1.976|
0003a6  f7fffffe          BL       SPI_I2S_GetFlagStatus
0003aa  2800              CMP      r0,#0
0003ac  d0f9              BEQ      |L1.930|
;;;406    
;;;407      /* Send Half Word through the SPI1 peripheral */
;;;408      SPI_I2S_SendData(SPI1, HalfWord);
0003ae  4621              MOV      r1,r4
0003b0  4807              LDR      r0,|L1.976|
0003b2  f7fffffe          BL       SPI_I2S_SendData
;;;409    
;;;410      /* Wait to receive a Half Word */
;;;411      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
0003b6  bf00              NOP      
                  |L1.952|
0003b8  2101              MOVS     r1,#1
0003ba  4805              LDR      r0,|L1.976|
0003bc  f7fffffe          BL       SPI_I2S_GetFlagStatus
0003c0  2800              CMP      r0,#0
0003c2  d0f9              BEQ      |L1.952|
;;;412    
;;;413      /* Return the Half Word read from the SPI bus */
;;;414      return SPI_I2S_ReceiveData(SPI1);
0003c4  4802              LDR      r0,|L1.976|
0003c6  f7fffffe          BL       SPI_I2S_ReceiveData
;;;415    }
0003ca  bd10              POP      {r4,pc}
;;;416    
                          ENDP

                  |L1.972|
                          DCD      0x40010800
                  |L1.976|
                          DCD      0x40013000

;*** Start embedded assembler ***

#line 1 "..\\bsp_lib\\spi_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_spi_flash_c_8795f693____REV16|
#line 129 "E:\\keli\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_spi_flash_c_8795f693____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_spi_flash_c_8795f693____REVSH|
#line 144
|__asm___11_spi_flash_c_8795f693____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
