; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\main.o --depend=.\Output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Buffercmp PROC
;;;121    *******************************************************************************/
;;;122    TestStatus Buffercmp(u8* pBuffer1, u8* pBuffer2, u16 BufferLength)
000000  b510              PUSH     {r4,lr}
;;;123    {
000002  4603              MOV      r3,r0
;;;124      while (BufferLength--)
000004  e007              B        |L1.22|
                  |L1.6|
;;;125      {
;;;126        if (*pBuffer1 != *pBuffer2)
000006  7818              LDRB     r0,[r3,#0]
000008  780c              LDRB     r4,[r1,#0]
00000a  42a0              CMP      r0,r4
00000c  d001              BEQ      |L1.18|
;;;127        {
;;;128          return FAILED;
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;129        }
;;;130    
;;;131        pBuffer1++;
;;;132        pBuffer2++;
;;;133      }
;;;134    
;;;135      return PASSED;
;;;136    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  1c5b              ADDS     r3,r3,#1              ;131
000014  1c49              ADDS     r1,r1,#1              ;132
                  |L1.22|
000016  0010              MOVS     r0,r2                 ;124
000018  f1a20401          SUB      r4,r2,#1              ;124
00001c  b2a2              UXTH     r2,r4                 ;124
00001e  d1f2              BNE      |L1.6|
000020  2001              MOVS     r0,#1                 ;135
000022  e7f5              B        |L1.16|
;;;137    
                          ENDP

                  main PROC
;;;51       *****************************************************************************/
;;;52     int main(void)
000024  f7fffffe          BL       RCC_Configuration
;;;53     {
;;;54        	RCC_Configuration();
;;;55     	NVIC_Configuration();
000028  f7fffffe          BL       NVIC_Configuration
;;;56     	GPIO_Configuration();
00002c  f7fffffe          BL       GPIO_Configuration
;;;57     	GpioLed_Init();
000030  f7fffffe          BL       GpioLed_Init
;;;58         SPI_FLASH_Init();
000034  f7fffffe          BL       SPI_FLASH_Init
;;;59     
;;;60     	flash_ID = SPI_FLASH_ReadID();      //读ID
000038  f7fffffe          BL       SPI_FLASH_ReadID
00003c  492f              LDR      r1,|L1.252|
00003e  6008              STR      r0,[r1,#0]  ; flash_ID
;;;61     	
;;;62     	if(flash_ID == AT45DB161D_FLASH_ID)	//检查ID是否匹配
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]  ; flash_ID
000044  492e              LDR      r1,|L1.256|
000046  4288              CMP      r0,r1
000048  d104              BNE      |L1.84|
;;;63     	{
;;;64     	    GPIO_ResetBits(GPIO_LED, LED1); //ID正确，打开LED1
00004a  2140              MOVS     r1,#0x40
00004c  482d              LDR      r0,|L1.260|
00004e  f7fffffe          BL       GPIO_ResetBits
000052  e003              B        |L1.92|
                  |L1.84|
;;;65     	}
;;;66     	else
;;;67     	{
;;;68     	    GPIO_SetBits(GPIO_LED, LED1);   //ID错误，关闭LED1
000054  2140              MOVS     r1,#0x40
000056  482b              LDR      r0,|L1.260|
000058  f7fffffe          BL       GPIO_SetBits
                  |L1.92|
;;;69     	}
;;;70     
;;;71     	/* 读写测试 */
;;;72     	SPI_FLASH_PageErase(FLASH_SectorToErase);  //页擦出
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       SPI_FLASH_PageErase
;;;73     	SPI_FLASH_BufferWrite(Tx_Buffer, FLASH_WriteAddress, BufferSize); //写入数据
000062  2252              MOVS     r2,#0x52
000064  2100              MOVS     r1,#0
000066  4828              LDR      r0,|L1.264|
000068  f7fffffe          BL       SPI_FLASH_BufferWrite
;;;74     	SPI_FLASH_BufferRead(Rx_Buffer, FLASH_ReadAddress, BufferSize);   //读出数据
00006c  2252              MOVS     r2,#0x52
00006e  2100              MOVS     r1,#0
000070  4826              LDR      r0,|L1.268|
000072  f7fffffe          BL       SPI_FLASH_BufferRead
;;;75     
;;;76     	/* 检查写入与读出的数据是否相同 */
;;;77     	TransferStatus1 = Buffercmp(Tx_Buffer, Rx_Buffer, BufferSize);    //比较读出与写入的数据
000076  2252              MOVS     r2,#0x52
000078  4924              LDR      r1,|L1.268|
00007a  4823              LDR      r0,|L1.264|
00007c  f7fffffe          BL       Buffercmp
000080  4923              LDR      r1,|L1.272|
000082  7008              STRB     r0,[r1,#0]
;;;78     
;;;79     	if(TransferStatus1 == PASSED)
000084  4608              MOV      r0,r1
000086  7800              LDRB     r0,[r0,#0]  ; TransferStatus1
000088  2801              CMP      r0,#1
00008a  d104              BNE      |L1.150|
;;;80     	{
;;;81     	    GPIO_ResetBits(GPIO_LED, LED2); //写入与读出的数据相同 LED2亮
00008c  2180              MOVS     r1,#0x80
00008e  481d              LDR      r0,|L1.260|
000090  f7fffffe          BL       GPIO_ResetBits
000094  e003              B        |L1.158|
                  |L1.150|
;;;82     	}
;;;83     	else
;;;84     	{
;;;85     	    GPIO_SetBits(GPIO_LED, LED2);   //写入与读出的数据相同 LED2灭
000096  2180              MOVS     r1,#0x80
000098  481a              LDR      r0,|L1.260|
00009a  f7fffffe          BL       GPIO_SetBits
                  |L1.158|
;;;86     	}	    
;;;87     
;;;88     	/* 擦出并读数据测试 */
;;;89     	SPI_FLASH_PageErase(FLASH_SectorToErase);   //页擦出
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       SPI_FLASH_PageErase
;;;90     	SPI_FLASH_BufferRead(Rx_Buffer, FLASH_ReadAddress, BufferSize);	//读擦出后的数据
0000a4  2252              MOVS     r2,#0x52
0000a6  2100              MOVS     r1,#0
0000a8  4818              LDR      r0,|L1.268|
0000aa  f7fffffe          BL       SPI_FLASH_BufferRead
;;;91     	
;;;92     	for (Index = 0; Index < BufferSize; Index++)  //检查数据是否不是0XFF
0000ae  2000              MOVS     r0,#0
0000b0  4918              LDR      r1,|L1.276|
0000b2  7008              STRB     r0,[r1,#0]
0000b4  e00d              B        |L1.210|
                  |L1.182|
;;;93     	{
;;;94     		if (Rx_Buffer[Index] != 0xFF)
0000b6  4815              LDR      r0,|L1.268|
0000b8  4916              LDR      r1,|L1.276|
0000ba  7809              LDRB     r1,[r1,#0]  ; Index
0000bc  5c40              LDRB     r0,[r0,r1]
0000be  28ff              CMP      r0,#0xff
0000c0  d002              BEQ      |L1.200|
;;;95     		{
;;;96     			TransferStatus2 = FAILED;
0000c2  2000              MOVS     r0,#0
0000c4  4914              LDR      r1,|L1.280|
0000c6  7008              STRB     r0,[r1,#0]
                  |L1.200|
0000c8  4812              LDR      r0,|L1.276|
0000ca  7800              LDRB     r0,[r0,#0]            ;92  ; Index
0000cc  1c40              ADDS     r0,r0,#1              ;92
0000ce  4911              LDR      r1,|L1.276|
0000d0  7008              STRB     r0,[r1,#0]            ;92
                  |L1.210|
0000d2  4810              LDR      r0,|L1.276|
0000d4  7800              LDRB     r0,[r0,#0]            ;92  ; Index
0000d6  2852              CMP      r0,#0x52              ;92
0000d8  d3ed              BCC      |L1.182|
;;;97     		}
;;;98     	}
;;;99     
;;;100    	if(TransferStatus2 == PASSED)
0000da  480f              LDR      r0,|L1.280|
0000dc  7800              LDRB     r0,[r0,#0]  ; TransferStatus2
0000de  2801              CMP      r0,#1
0000e0  d104              BNE      |L1.236|
;;;101    	{
;;;102    	    GPIO_ResetBits(GPIO_LED, LED3); //擦出后，读出数据全为0XFF 擦除正确 LED3亮
0000e2  0201              LSLS     r1,r0,#8
0000e4  4807              LDR      r0,|L1.260|
0000e6  f7fffffe          BL       GPIO_ResetBits
0000ea  e004              B        |L1.246|
                  |L1.236|
;;;103    	}
;;;104    	else
;;;105    	{
;;;106    	    GPIO_SetBits(GPIO_LED, LED3);   //擦出后，读出数据不全为0XFF 擦除错误 LED3灭
0000ec  f44f7180          MOV      r1,#0x100
0000f0  4804              LDR      r0,|L1.260|
0000f2  f7fffffe          BL       GPIO_SetBits
                  |L1.246|
;;;107    	}
;;;108        while (1)
0000f6  bf00              NOP      
                  |L1.248|
0000f8  e7fe              B        |L1.248|
;;;109        {
;;;110        }
;;;111    }
;;;112    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L1.252|
                          DCD      flash_ID
                  |L1.256|
                          DCD      0x1f260000
                  |L1.260|
                          DCD      0x40011c00
                  |L1.264|
                          DCD      Tx_Buffer
                  |L1.268|
                          DCD      Rx_Buffer
                  |L1.272|
                          DCD      TransferStatus1
                  |L1.276|
                          DCD      Index
                  |L1.280|
                          DCD      TransferStatus2

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rx_Buffer
                          %        82

                          AREA ||.data||, DATA, ALIGN=2

                  Tx_Buffer
000000  53544d33          DCB      0x53,0x54,0x4d,0x33
000004  32463130          DCB      0x32,0x46,0x31,0x30
000008  78205350          DCB      0x78,0x20,0x53,0x50
00000c  49204669          DCB      0x49,0x20,0x46,0x69
000010  726d7761          DCB      0x72,0x6d,0x77,0x61
000014  7265204c          DCB      0x72,0x65,0x20,0x4c
000018  69627261          DCB      0x69,0x62,0x72,0x61
00001c  72792045          DCB      0x72,0x79,0x20,0x45
000020  78616d70          DCB      0x78,0x61,0x6d,0x70
000024  6c653a20          DCB      0x6c,0x65,0x3a,0x20
000028  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00002c  756e6963          DCB      0x75,0x6e,0x69,0x63
000030  6174696f          DCB      0x61,0x74,0x69,0x6f
000034  6e207769          DCB      0x6e,0x20,0x77,0x69
000038  74682061          DCB      0x74,0x68,0x20,0x61
00003c  6e204154          DCB      0x6e,0x20,0x41,0x54
000040  34354442          DCB      0x34,0x35,0x44,0x42
000044  31363144          DCB      0x31,0x36,0x31,0x44
000048  20535049          DCB      0x20,0x53,0x50,0x49
00004c  20464c41          DCB      0x20,0x46,0x4c,0x41
000050  53480000          DCB      0x53,0x48,0x00,0x00
                  flash_ID
                          DCD      0x00000000
                  TransferStatus1
000058  00                DCB      0x00
                  TransferStatus2
000059  01                DCB      0x01
                  Index
00005a  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
