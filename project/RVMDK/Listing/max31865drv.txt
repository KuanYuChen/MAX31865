; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\max31865drv.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\max31865drv.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IE:\keli\ARM\RV31\INC -IE:\keli\ARM\CMSIS\Include -IE:\keli\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\max31865drv.crf ..\bsp_lib\MAX31865drv.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  maxim_31865_write_register PROC
;;;32     
;;;33     void maxim_31865_write_register(uint8_t uch_register_address, uint8_t uch_register_value)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;35       SPI_CS_LOW;
000006  2140              MOVS     r1,#0x40
000008  4878              LDR      r0,|L1.492|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;36       SPI_WriteByte(uch_register_address);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       SPI_WriteByte
;;;37       SPI_WriteByte(uch_register_value);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SPI_WriteByte
;;;38       SPI_CS_HIGH; 
00001a  2140              MOVS     r1,#0x40
00001c  4873              LDR      r0,|L1.492|
00001e  f7fffffe          BL       GPIO_SetBits
;;;39     }
000022  bd70              POP      {r4-r6,pc}
;;;40     
                          ENDP

                  maxim_31865_write_nregisters PROC
;;;41     void maxim_31865_write_nregisters(uint8_t uch_register_address,uint8_t *uch_buff,uint8_t uch_nBytes)
000024  b570              PUSH     {r4-r6,lr}
;;;42     {
000026  4606              MOV      r6,r0
000028  460c              MOV      r4,r1
00002a  4615              MOV      r5,r2
;;;43       SPI_CS_LOW;
00002c  2140              MOVS     r1,#0x40
00002e  486f              LDR      r0,|L1.492|
000030  f7fffffe          BL       GPIO_ResetBits
;;;44       SPI_WriteByte(uch_register_address);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       SPI_WriteByte
;;;45       SPI_Write(uch_buff,uch_nBytes);
00003a  4629              MOV      r1,r5
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       SPI_Write
;;;46       SPI_CS_HIGH; 
000042  2140              MOVS     r1,#0x40
000044  4869              LDR      r0,|L1.492|
000046  f7fffffe          BL       GPIO_SetBits
;;;47     }
00004a  bd70              POP      {r4-r6,pc}
;;;48     uint8_t maxim_31865_read_register(uint8_t uch_register_address)
                          ENDP

                  maxim_31865_read_register PROC
00004c  b570              PUSH     {r4-r6,lr}
;;;49     {
00004e  4604              MOV      r4,r0
;;;50       uint8_t uch_register_data;
;;;51       
;;;52       SPI_CS_LOW;
000050  2140              MOVS     r1,#0x40
000052  4866              LDR      r0,|L1.492|
000054  f7fffffe          BL       GPIO_ResetBits
;;;53       SPI_WriteByte(uch_register_address);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       SPI_WriteByte
;;;54       uch_register_data=SPI_ReadByte();
00005e  f7fffffe          BL       SPI_ReadByte
000062  4605              MOV      r5,r0
;;;55       SPI_CS_HIGH;
000064  2140              MOVS     r1,#0x40
000066  4861              LDR      r0,|L1.492|
000068  f7fffffe          BL       GPIO_SetBits
;;;56       return (uch_register_data);
00006c  4628              MOV      r0,r5
;;;57       
;;;58     }
00006e  bd70              POP      {r4-r6,pc}
;;;59     void maxim_31865_read_nregisters(uint8_t uch_register_address, uint8_t *uch_buff,uint8_t uch_nBytes)
                          ENDP

                  maxim_31865_read_nregisters PROC
000070  b570              PUSH     {r4-r6,lr}
;;;60     {
000072  4606              MOV      r6,r0
000074  460c              MOV      r4,r1
000076  4615              MOV      r5,r2
;;;61      SPI_CS_LOW;
000078  2140              MOVS     r1,#0x40
00007a  485c              LDR      r0,|L1.492|
00007c  f7fffffe          BL       GPIO_ResetBits
;;;62      SPI_WriteByte(uch_register_address);
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       SPI_WriteByte
;;;63      SPI_Read(uch_buff,uch_nBytes);
000086  4629              MOV      r1,r5
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       SPI_Read
;;;64      SPI_CS_HIGH;
00008e  2140              MOVS     r1,#0x40
000090  4856              LDR      r0,|L1.492|
000092  f7fffffe          BL       GPIO_SetBits
;;;65     }
000096  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP

                  maxim_31865_init PROC
;;;67     void maxim_31865_init(max31865_configuration* configuration)
000098  b570              PUSH     {r4-r6,lr}
;;;68     { 
00009a  4604              MOV      r4,r0
;;;69         uint8_t temp=0;
00009c  2500              MOVS     r5,#0
;;;70         temp|=configuration->Vbias|configuration->Conversion_mode|configuration->Rtd_wire|configuration->Filter;
00009e  7820              LDRB     r0,[r4,#0]
0000a0  7861              LDRB     r1,[r4,#1]
0000a2  4308              ORRS     r0,r0,r1
0000a4  78a1              LDRB     r1,[r4,#2]
0000a6  4308              ORRS     r0,r0,r1
0000a8  78e1              LDRB     r1,[r4,#3]
0000aa  4308              ORRS     r0,r0,r1
0000ac  4305              ORRS     r5,r5,r0
;;;71         maxim_31865_write_register(0x80,temp);  
0000ae  4629              MOV      r1,r5
0000b0  2080              MOVS     r0,#0x80
0000b2  f7fffffe          BL       maxim_31865_write_register
;;;72     }
0000b6  bd70              POP      {r4-r6,pc}
;;;73     /*****************************************************
                          ENDP

                  maxim_set_fault_threshold PROC
;;;76     ******************************************************/
;;;77     void maxim_set_fault_threshold(float high_threshold, float low_threshold)
0000b8  e92d43f8          PUSH     {r3-r9,lr}
;;;78     {
0000bc  4606              MOV      r6,r0
0000be  460d              MOV      r5,r1
;;;79       uint8_t au_threshold[4];
;;;80       uint16_t u_threshold;
;;;81       
;;;82       u_threshold= ((int)((high_threshold/REF_RES)*16383))<<1;
0000c0  494b              LDR      r1,|L1.496|
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       __aeabi_fdiv
0000c8  4680              MOV      r8,r0
0000ca  494a              LDR      r1,|L1.500|
0000cc  f7fffffe          BL       __aeabi_fmul
0000d0  4607              MOV      r7,r0
0000d2  f7fffffe          BL       __aeabi_f2iz
0000d6  f64f71ff          MOV      r1,#0xffff
0000da  ea010440          AND      r4,r1,r0,LSL #1
;;;83       au_threshold[0]=(u_threshold>>8);
0000de  1220              ASRS     r0,r4,#8
0000e0  f88d0000          STRB     r0,[sp,#0]
;;;84       au_threshold[1]=u_threshold&0xff;
0000e4  b2e0              UXTB     r0,r4
0000e6  f88d0001          STRB     r0,[sp,#1]
;;;85       u_threshold=((int)((low_threshold/REF_RES)*16383))<<1;
0000ea  4941              LDR      r1,|L1.496|
0000ec  4628              MOV      r0,r5
0000ee  f7fffffe          BL       __aeabi_fdiv
0000f2  4680              MOV      r8,r0
0000f4  493f              LDR      r1,|L1.500|
0000f6  f7fffffe          BL       __aeabi_fmul
0000fa  4607              MOV      r7,r0
0000fc  f7fffffe          BL       __aeabi_f2iz
000100  f64f71ff          MOV      r1,#0xffff
000104  ea010440          AND      r4,r1,r0,LSL #1
;;;86       au_threshold[2]=(u_threshold>>8);
000108  1220              ASRS     r0,r4,#8
00010a  f88d0002          STRB     r0,[sp,#2]
;;;87       au_threshold[3]=u_threshold&0xff;
00010e  b2e0              UXTB     r0,r4
000110  f88d0003          STRB     r0,[sp,#3]
;;;88       
;;;89       maxim_31865_write_nregisters(0x83,au_threshold,4);
000114  2204              MOVS     r2,#4
000116  4669              MOV      r1,sp
000118  2083              MOVS     r0,#0x83
00011a  f7fffffe          BL       maxim_31865_write_nregisters
;;;90     	
;;;91     }
00011e  e8bd83f8          POP      {r3-r9,pc}
;;;92     /****************************************************
                          ENDP

                  maxim_auto_fault_detection PROC
;;;94     *****************************************************/
;;;95     uint8_t maxim_auto_fault_detection(void)  
000122  b570              PUSH     {r4-r6,lr}
;;;96     {
;;;97      uint8_t uch_status;
;;;98      uint8_t uch_config;
;;;99      uch_config=maxim_31865_read_register(0x00);
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       maxim_31865_read_register
00012a  4604              MOV      r4,r0
;;;100     uch_config|=0x84;
00012c  f0440484          ORR      r4,r4,#0x84
;;;101     maxim_31865_write_register(0x80, uch_config);
000130  4621              MOV      r1,r4
000132  2080              MOVS     r0,#0x80
000134  f7fffffe          BL       maxim_31865_write_register
;;;102     while((maxim_31865_read_register(0x00)&0xC0)!=0x00);
000138  bf00              NOP      
                  |L1.314|
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       maxim_31865_read_register
000140  f0100fc0          TST      r0,#0xc0
000144  d1f9              BNE      |L1.314|
;;;103     uch_status=maxim_31865_read_register(0x07);
000146  2007              MOVS     r0,#7
000148  f7fffffe          BL       maxim_31865_read_register
00014c  4605              MOV      r5,r0
;;;104     return(uch_status); 
00014e  4628              MOV      r0,r5
;;;105    }
000150  bd70              POP      {r4-r6,pc}
;;;106    
                          ENDP

                  delay_us PROC
;;;143    //延迟1us，该程序和选择的CPU时钟有关，可根据时钟进行调整
;;;144    void delay_us(uint32_t us)
000152  2102              MOVS     r1,#2
;;;145    {
;;;146      uint32_t temp;
;;;147      //temp=0x000640;
;;;148      temp=0x02;
;;;149      while(us)
000154  e005              B        |L1.354|
                  |L1.342|
;;;150      {
;;;151        while (temp!=0)
000156  e000              B        |L1.346|
                  |L1.344|
;;;152            temp--;
000158  1e49              SUBS     r1,r1,#1
                  |L1.346|
00015a  2900              CMP      r1,#0                 ;151
00015c  d1fc              BNE      |L1.344|
;;;153        temp=0x02;
00015e  2102              MOVS     r1,#2
;;;154        us--;
000160  1e40              SUBS     r0,r0,#1
                  |L1.354|
000162  2800              CMP      r0,#0                 ;149
000164  d1f7              BNE      |L1.342|
;;;155      }
;;;156    }
000166  4770              BX       lr
                          ENDP

                  maxim_manual_fault_detection PROC
;;;106    
;;;107    uint8_t maxim_manual_fault_detection(void)
000168  b570              PUSH     {r4-r6,lr}
;;;108    {
;;;109     uint8_t uch_status;
;;;110     uint8_t uch_config;
;;;111     uch_config=maxim_31865_read_register(0x00);
00016a  2000              MOVS     r0,#0
00016c  f7fffffe          BL       maxim_31865_read_register
000170  4604              MOV      r4,r0
;;;112     uch_config|=0x80;
000172  f0440480          ORR      r4,r4,#0x80
;;;113     uch_config&=0xf3;
000176  f00404f3          AND      r4,r4,#0xf3
;;;114     maxim_31865_write_register(0x80, uch_config);
00017a  4621              MOV      r1,r4
00017c  2080              MOVS     r0,#0x80
00017e  f7fffffe          BL       maxim_31865_write_register
;;;115     delay_us(200);
000182  20c8              MOVS     r0,#0xc8
000184  f7fffffe          BL       delay_us
;;;116     uch_config|=0x88;
000188  f0440488          ORR      r4,r4,#0x88
;;;117     maxim_31865_write_register(0x80, uch_config);
00018c  4621              MOV      r1,r4
00018e  2080              MOVS     r0,#0x80
000190  f7fffffe          BL       maxim_31865_write_register
;;;118     delay_us(200);
000194  20c8              MOVS     r0,#0xc8
000196  f7fffffe          BL       delay_us
;;;119     uch_config|=0x8C;
00019a  f044048c          ORR      r4,r4,#0x8c
;;;120     maxim_31865_write_register(0x80, uch_config);
00019e  4621              MOV      r1,r4
0001a0  2080              MOVS     r0,#0x80
0001a2  f7fffffe          BL       maxim_31865_write_register
;;;121     while((maxim_31865_read_register(0x00)&0x0C)!=0x00);
0001a6  bf00              NOP      
                  |L1.424|
0001a8  2000              MOVS     r0,#0
0001aa  f7fffffe          BL       maxim_31865_read_register
0001ae  f0100f0c          TST      r0,#0xc
0001b2  d1f9              BNE      |L1.424|
;;;122     uch_status=maxim_31865_read_register(0x07);
0001b4  2007              MOVS     r0,#7
0001b6  f7fffffe          BL       maxim_31865_read_register
0001ba  4605              MOV      r5,r0
;;;123     return(uch_status);   
0001bc  4628              MOV      r0,r5
;;;124    }
0001be  bd70              POP      {r4-r6,pc}
;;;125    
                          ENDP

                  maxim_clear_fault_status PROC
;;;126    void maxim_clear_fault_status(void)
0001c0  b510              PUSH     {r4,lr}
;;;127    {
;;;128     uint8_t uch_config;
;;;129     
;;;130      uch_config=maxim_31865_read_register(0x00);
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       maxim_31865_read_register
0001c8  4604              MOV      r4,r0
;;;131      uch_config&=0xd3;
0001ca  f00404d3          AND      r4,r4,#0xd3
;;;132      uch_config|=0x02;
0001ce  f0440402          ORR      r4,r4,#2
;;;133      maxim_31865_write_register(0x80, uch_config);  
0001d2  4621              MOV      r1,r4
0001d4  2080              MOVS     r0,#0x80
0001d6  f7fffffe          BL       maxim_31865_write_register
;;;134    }
0001da  bd10              POP      {r4,pc}
;;;135    //-------------------------------------------------------------------------/
                          ENDP

                  maxim_get_rtd_value PROC
;;;137    
;;;138    void maxim_get_rtd_value(uint8_t *uch_buff)
0001dc  b510              PUSH     {r4,lr}
;;;139    {
0001de  4604              MOV      r4,r0
;;;140     maxim_31865_read_nregisters(0x01,uch_buff,2);
0001e0  2202              MOVS     r2,#2
0001e2  4621              MOV      r1,r4
0001e4  2001              MOVS     r0,#1
0001e6  f7fffffe          BL       maxim_31865_read_nregisters
;;;141    }
0001ea  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L1.492|
                          DCD      0x40010c00
                  |L1.496|
                          DCD      0x43c80000
                  |L1.500|
                          DCD      0x467ffc00

                          AREA ||.data||, DATA, ALIGN=0

                  uch_cr0
000000  00                DCB      0x00
                  uch_cr1
000001  00                DCB      0x00
                  uch_mask
000002  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\bsp_lib\\MAX31865drv.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_MAX31865drv_c_6a289180____REV16|
#line 129 "E:\\keli\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_MAX31865drv_c_6a289180____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_MAX31865drv_c_6a289180____REVSH|
#line 144
|__asm___13_MAX31865drv_c_6a289180____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
