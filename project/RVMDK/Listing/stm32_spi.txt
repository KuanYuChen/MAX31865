; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\stm32_spi.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\stm32_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IE:\keli\ARM\RV31\INC -IE:\keli\ARM\CMSIS\Include -IE:\keli\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\stm32_spi.crf ..\bsp_lib\stm32_spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_Inital PROC
;;;47        
;;;48     void  SPI_Inital(void)
000000  b500              PUSH     {lr}
;;;49     {
000002  b087              SUB      sp,sp,#0x1c
;;;50      SPI_InitTypeDef  SPI_InitStructure;
;;;51      GPIO_InitTypeDef  GPIO_InitStructure;
;;;52         
;;;53       //Inital GPIO
;;;54        
;;;55        RCC_APB2PeriphClockCmd(SPI_GPIO_CLK, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;56        RCC_APB2PeriphClockCmd(SPI_CS_GPIO_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2008              MOVS     r0,#8
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;57      
;;;58        /*!< SPI Periph clock enable */
;;;59        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000014  2101              MOVS     r1,#1
000016  0308              LSLS     r0,r1,#12
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;60        
;;;61        /*!< GPIO configuration */  
;;;62        /*!< Configure SPI pins */
;;;63        GPIO_InitStructure.GPIO_Pin = SPI_SCK|SPI_MOSI|SPI_MISO;
00001c  20e0              MOVS     r0,#0xe0
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;64        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0006          STRB     r0,[sp,#6]
;;;65        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000028  2018              MOVS     r0,#0x18
00002a  f88d0007          STRB     r0,[sp,#7]
;;;66        GPIO_Init(GPIOA, &GPIO_InitStructure);
00002e  a901              ADD      r1,sp,#4
000030  48a8              LDR      r0,|L1.724|
000032  f7fffffe          BL       GPIO_Init
;;;67        
;;;68        
;;;69        /*!< Configure SPI pin: CS */
;;;70        GPIO_InitStructure.GPIO_Pin = SPI_CS;
000036  2040              MOVS     r0,#0x40
000038  f8ad0004          STRH     r0,[sp,#4]
;;;71        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003c  2003              MOVS     r0,#3
00003e  f88d0006          STRB     r0,[sp,#6]
;;;72        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000042  2010              MOVS     r0,#0x10
000044  f88d0007          STRB     r0,[sp,#7]
;;;73        GPIO_Init(GPIOB, &GPIO_InitStructure); 
000048  a901              ADD      r1,sp,#4
00004a  48a3              LDR      r0,|L1.728|
00004c  f7fffffe          BL       GPIO_Init
;;;74        
;;;75        //set CS high
;;;76         GPIO_SetBits(GPIOB, SPI_CS); 
000050  2140              MOVS     r1,#0x40
000052  48a1              LDR      r0,|L1.728|
000054  f7fffffe          BL       GPIO_SetBits
;;;77         
;;;78        /*!< SPI configuration */
;;;79        SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000058  2000              MOVS     r0,#0
00005a  f8ad0008          STRH     r0,[sp,#8]
;;;80        SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00005e  f44f7082          MOV      r0,#0x104
000062  f8ad000a          STRH     r0,[sp,#0xa]
;;;81        SPI_InitStructure.SPI_DataSize =SPI_DataSize_8b;
000066  2000              MOVS     r0,#0
000068  f8ad000c          STRH     r0,[sp,#0xc]
;;;82        SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00006c  2002              MOVS     r0,#2
00006e  f8ad000e          STRH     r0,[sp,#0xe]
;;;83        SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000072  2001              MOVS     r0,#1
000074  f8ad0010          STRH     r0,[sp,#0x10]
;;;84        SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000078  0240              LSLS     r0,r0,#9
00007a  f8ad0012          STRH     r0,[sp,#0x12]
;;;85        SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00007e  2010              MOVS     r0,#0x10
000080  f8ad0014          STRH     r0,[sp,#0x14]
;;;86        SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000084  2000              MOVS     r0,#0
000086  f8ad0016          STRH     r0,[sp,#0x16]
;;;87        SPI_InitStructure.SPI_CRCPolynomial = 7;
00008a  2007              MOVS     r0,#7
00008c  f8ad0018          STRH     r0,[sp,#0x18]
;;;88        
;;;89           /* SPI Peripheral Enable */
;;;90        SPI_Cmd(SPI1, ENABLE);
000090  2101              MOVS     r1,#1
000092  4892              LDR      r0,|L1.732|
000094  f7fffffe          BL       SPI_Cmd
;;;91        /* Apply SPI configuration after enabling it */
;;;92        SPI_Init(SPI1, &SPI_InitStructure);
000098  a902              ADD      r1,sp,#8
00009a  4890              LDR      r0,|L1.732|
00009c  f7fffffe          BL       SPI_Init
;;;93     
;;;94     
;;;95     }
0000a0  b007              ADD      sp,sp,#0x1c
0000a2  bd00              POP      {pc}
;;;96     
                          ENDP

                  SPI_Write PROC
;;;110    ************************************************************************/
;;;111    uint8_t SPI_Write(uint8_t *buffer, uint8_t nBytes)
0000a4  b570              PUSH     {r4-r6,lr}
;;;112    {
0000a6  4605              MOV      r5,r0
0000a8  460e              MOV      r6,r1
;;;113      uint8_t i;
;;;114      for(i=0;i<nBytes;i++)
0000aa  2400              MOVS     r4,#0
0000ac  e02e              B        |L1.268|
                  |L1.174|
;;;115         {
;;;116           TIMEOUT = LONG_TIMEOUT;
0000ae  f44f4020          MOV      r0,#0xa000
0000b2  498b              LDR      r1,|L1.736|
0000b4  6008              STR      r0,[r1,#0]  ; TIMEOUT
;;;117           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET)  //not empty
0000b6  e007              B        |L1.200|
                  |L1.184|
;;;118                 {
;;;119                    if((TIMEOUT--) == 0) return (1);
0000b8  4989              LDR      r1,|L1.736|
0000ba  6808              LDR      r0,[r1,#0]  ; TIMEOUT
0000bc  1e41              SUBS     r1,r0,#1
0000be  4a88              LDR      r2,|L1.736|
0000c0  6011              STR      r1,[r2,#0]  ; TIMEOUT
0000c2  b908              CBNZ     r0,|L1.200|
0000c4  2001              MOVS     r0,#1
                  |L1.198|
;;;120                 }
;;;121           SPI_I2S_SendData(SPI1,buffer[i]);
;;;122    
;;;123           TIMEOUT = LONG_TIMEOUT;
;;;124           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)
;;;125                {
;;;126                   if((TIMEOUT--) == 0) return (1);
;;;127                }
;;;128           SPI_I2S_ReceiveData(SPI1);
;;;129          // SPI_I2S_ReceiveData(SPI1);
;;;130           
;;;131         }
;;;132      return(0);
;;;133      
;;;134    }
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  2102              MOVS     r1,#2                 ;117
0000ca  4884              LDR      r0,|L1.732|
0000cc  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000d0  2800              CMP      r0,#0                 ;117
0000d2  d0f1              BEQ      |L1.184|
0000d4  5d29              LDRB     r1,[r5,r4]            ;121
0000d6  4881              LDR      r0,|L1.732|
0000d8  f7fffffe          BL       SPI_I2S_SendData
0000dc  f44f4020          MOV      r0,#0xa000            ;123
0000e0  497f              LDR      r1,|L1.736|
0000e2  6008              STR      r0,[r1,#0]            ;123  ; TIMEOUT
0000e4  e007              B        |L1.246|
                  |L1.230|
0000e6  497e              LDR      r1,|L1.736|
0000e8  6808              LDR      r0,[r1,#0]            ;126  ; TIMEOUT
0000ea  1e41              SUBS     r1,r0,#1              ;126
0000ec  4a7c              LDR      r2,|L1.736|
0000ee  6011              STR      r1,[r2,#0]            ;126  ; TIMEOUT
0000f0  b908              CBNZ     r0,|L1.246|
0000f2  2001              MOVS     r0,#1                 ;126
0000f4  e7e7              B        |L1.198|
                  |L1.246|
0000f6  2101              MOVS     r1,#1                 ;124
0000f8  4878              LDR      r0,|L1.732|
0000fa  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000fe  2800              CMP      r0,#0                 ;124
000100  d0f1              BEQ      |L1.230|
000102  4876              LDR      r0,|L1.732|
000104  f7fffffe          BL       SPI_I2S_ReceiveData
000108  1c60              ADDS     r0,r4,#1              ;114
00010a  b2c4              UXTB     r4,r0                 ;114
                  |L1.268|
00010c  42b4              CMP      r4,r6                 ;114
00010e  dbce              BLT      |L1.174|
000110  2000              MOVS     r0,#0                 ;132
000112  e7d8              B        |L1.198|
;;;135    
                          ENDP

                  SPI_Read PROC
;;;150    ************************************************************************/
;;;151    uint8_t SPI_Read(uint8_t *buffer, uint8_t nBytes)
000114  b570              PUSH     {r4-r6,lr}
;;;152    {
000116  4605              MOV      r5,r0
000118  460e              MOV      r6,r1
;;;153      uint8_t i;
;;;154      
;;;155      SPI_I2S_ReceiveData(SPI1);
00011a  4870              LDR      r0,|L1.732|
00011c  f7fffffe          BL       SPI_I2S_ReceiveData
;;;156      for(i=0;i<nBytes;i++)
000120  2400              MOVS     r4,#0
000122  e02f              B        |L1.388|
                  |L1.292|
;;;157         {
;;;158           TIMEOUT = LONG_TIMEOUT;
000124  f44f4020          MOV      r0,#0xa000
000128  496d              LDR      r1,|L1.736|
00012a  6008              STR      r0,[r1,#0]  ; TIMEOUT
;;;159           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET)  //not empty
00012c  e007              B        |L1.318|
                  |L1.302|
;;;160                 {
;;;161                    if((TIMEOUT--) == 0) return (1);
00012e  496c              LDR      r1,|L1.736|
000130  6808              LDR      r0,[r1,#0]  ; TIMEOUT
000132  1e41              SUBS     r1,r0,#1
000134  4a6a              LDR      r2,|L1.736|
000136  6011              STR      r1,[r2,#0]  ; TIMEOUT
000138  b908              CBNZ     r0,|L1.318|
00013a  2001              MOVS     r0,#1
                  |L1.316|
;;;162                 }
;;;163           SPI_I2S_SendData(SPI1,0x00);
;;;164           TIMEOUT = LONG_TIMEOUT;
;;;165           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)
;;;166                {
;;;167                   if((TIMEOUT--) == 0) return (1);
;;;168                }
;;;169           buffer[i]= SPI_I2S_ReceiveData(SPI1);
;;;170         }
;;;171      return(0);
;;;172    }
00013c  bd70              POP      {r4-r6,pc}
                  |L1.318|
00013e  2102              MOVS     r1,#2                 ;159
000140  4866              LDR      r0,|L1.732|
000142  f7fffffe          BL       SPI_I2S_GetFlagStatus
000146  2800              CMP      r0,#0                 ;159
000148  d0f1              BEQ      |L1.302|
00014a  2100              MOVS     r1,#0                 ;163
00014c  4863              LDR      r0,|L1.732|
00014e  f7fffffe          BL       SPI_I2S_SendData
000152  f44f4020          MOV      r0,#0xa000            ;164
000156  4962              LDR      r1,|L1.736|
000158  6008              STR      r0,[r1,#0]            ;164  ; TIMEOUT
00015a  e007              B        |L1.364|
                  |L1.348|
00015c  4960              LDR      r1,|L1.736|
00015e  6808              LDR      r0,[r1,#0]            ;167  ; TIMEOUT
000160  1e41              SUBS     r1,r0,#1              ;167
000162  4a5f              LDR      r2,|L1.736|
000164  6011              STR      r1,[r2,#0]            ;167  ; TIMEOUT
000166  b908              CBNZ     r0,|L1.364|
000168  2001              MOVS     r0,#1                 ;167
00016a  e7e7              B        |L1.316|
                  |L1.364|
00016c  2101              MOVS     r1,#1                 ;165
00016e  485b              LDR      r0,|L1.732|
000170  f7fffffe          BL       SPI_I2S_GetFlagStatus
000174  2800              CMP      r0,#0                 ;165
000176  d0f1              BEQ      |L1.348|
000178  4858              LDR      r0,|L1.732|
00017a  f7fffffe          BL       SPI_I2S_ReceiveData
00017e  5528              STRB     r0,[r5,r4]            ;169
000180  1c60              ADDS     r0,r4,#1              ;156
000182  b2c4              UXTB     r4,r0                 ;156
                  |L1.388|
000184  42b4              CMP      r4,r6                 ;156
000186  dbcd              BLT      |L1.292|
000188  2000              MOVS     r0,#0                 ;171
00018a  e7d7              B        |L1.316|
;;;173    
                          ENDP

                  SPI_WriteByte PROC
;;;178    
;;;179    uint8_t SPI_WriteByte(uint8_t data)
00018c  b510              PUSH     {r4,lr}
;;;180    {
00018e  4604              MOV      r4,r0
;;;181           TIMEOUT = LONG_TIMEOUT;
000190  f44f4020          MOV      r0,#0xa000
000194  4952              LDR      r1,|L1.736|
000196  6008              STR      r0,[r1,#0]  ; TIMEOUT
;;;182           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET)  //not empty
000198  e007              B        |L1.426|
                  |L1.410|
;;;183                 {
;;;184                    if((TIMEOUT--) == 0) return (1);
00019a  4951              LDR      r1,|L1.736|
00019c  6808              LDR      r0,[r1,#0]  ; TIMEOUT
00019e  1e41              SUBS     r1,r0,#1
0001a0  4a4f              LDR      r2,|L1.736|
0001a2  6011              STR      r1,[r2,#0]  ; TIMEOUT
0001a4  b908              CBNZ     r0,|L1.426|
0001a6  2001              MOVS     r0,#1
                  |L1.424|
;;;185                 }
;;;186           SPI_I2S_SendData(SPI1,data);
;;;187           TIMEOUT = LONG_TIMEOUT;
;;;188           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)
;;;189                {
;;;190                   if((TIMEOUT--) == 0) return (1);
;;;191                }
;;;192           SPI_I2S_ReceiveData(SPI1);
;;;193           SPI_I2S_ReceiveData(SPI1);
;;;194        
;;;195           return(0);
;;;196    }
0001a8  bd10              POP      {r4,pc}
                  |L1.426|
0001aa  2102              MOVS     r1,#2                 ;182
0001ac  484b              LDR      r0,|L1.732|
0001ae  f7fffffe          BL       SPI_I2S_GetFlagStatus
0001b2  2800              CMP      r0,#0                 ;182
0001b4  d0f1              BEQ      |L1.410|
0001b6  4621              MOV      r1,r4                 ;186
0001b8  4848              LDR      r0,|L1.732|
0001ba  f7fffffe          BL       SPI_I2S_SendData
0001be  f44f4020          MOV      r0,#0xa000            ;187
0001c2  4947              LDR      r1,|L1.736|
0001c4  6008              STR      r0,[r1,#0]            ;187  ; TIMEOUT
0001c6  e007              B        |L1.472|
                  |L1.456|
0001c8  4945              LDR      r1,|L1.736|
0001ca  6808              LDR      r0,[r1,#0]            ;190  ; TIMEOUT
0001cc  1e41              SUBS     r1,r0,#1              ;190
0001ce  4a44              LDR      r2,|L1.736|
0001d0  6011              STR      r1,[r2,#0]            ;190  ; TIMEOUT
0001d2  b908              CBNZ     r0,|L1.472|
0001d4  2001              MOVS     r0,#1                 ;190
0001d6  e7e7              B        |L1.424|
                  |L1.472|
0001d8  2101              MOVS     r1,#1                 ;188
0001da  4840              LDR      r0,|L1.732|
0001dc  f7fffffe          BL       SPI_I2S_GetFlagStatus
0001e0  2800              CMP      r0,#0                 ;188
0001e2  d0f1              BEQ      |L1.456|
0001e4  483d              LDR      r0,|L1.732|
0001e6  f7fffffe          BL       SPI_I2S_ReceiveData
0001ea  483c              LDR      r0,|L1.732|
0001ec  f7fffffe          BL       SPI_I2S_ReceiveData
0001f0  2000              MOVS     r0,#0                 ;195
0001f2  e7d9              B        |L1.424|
;;;197    
                          ENDP

                  SPI_ReadByte PROC
;;;202    
;;;203    uint8_t SPI_ReadByte(void)
0001f4  b510              PUSH     {r4,lr}
;;;204    {
;;;205          SPI_I2S_ReceiveData(SPI1);
0001f6  4839              LDR      r0,|L1.732|
0001f8  f7fffffe          BL       SPI_I2S_ReceiveData
;;;206           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);  //not empty
0001fc  bf00              NOP      
                  |L1.510|
0001fe  2102              MOVS     r1,#2
000200  4836              LDR      r0,|L1.732|
000202  f7fffffe          BL       SPI_I2S_GetFlagStatus
000206  2800              CMP      r0,#0
000208  d0f9              BEQ      |L1.510|
;;;207                
;;;208           SPI_I2S_SendData(SPI1,0xff);
00020a  21ff              MOVS     r1,#0xff
00020c  4833              LDR      r0,|L1.732|
00020e  f7fffffe          BL       SPI_I2S_SendData
;;;209          
;;;210           while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000212  bf00              NOP      
                  |L1.532|
000214  2101              MOVS     r1,#1
000216  4831              LDR      r0,|L1.732|
000218  f7fffffe          BL       SPI_I2S_GetFlagStatus
00021c  2800              CMP      r0,#0
00021e  d0f9              BEQ      |L1.532|
;;;211               
;;;212           return (SPI_I2S_ReceiveData(SPI1));
000220  482e              LDR      r0,|L1.732|
000222  f7fffffe          BL       SPI_I2S_ReceiveData
000226  b2c0              UXTB     r0,r0
;;;213    }
000228  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  Set_DRDY_Pin_INPUT PROC
;;;222    
;;;223    void Set_DRDY_Pin_INPUT(void)
00022a  b508              PUSH     {r3,lr}
;;;224    {
;;;225       GPIO_InitTypeDef  GPIO_InitStructure;
;;;226       
;;;227       RCC_APB2PeriphClockCmd(DRDY_GPIO_CLK, ENABLE); 
00022c  2101              MOVS     r1,#1
00022e  2008              MOVS     r0,#8
000230  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;228       GPIO_InitStructure.GPIO_Pin = DRDY_PIN;
000234  2020              MOVS     r0,#0x20
000236  f8ad0000          STRH     r0,[sp,#0]
;;;229       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00023a  2003              MOVS     r0,#3
00023c  f88d0002          STRB     r0,[sp,#2]
;;;230       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000240  2004              MOVS     r0,#4
000242  f88d0003          STRB     r0,[sp,#3]
;;;231       GPIO_Init(GPIOB, &GPIO_InitStructure);      
000246  4669              MOV      r1,sp
000248  4823              LDR      r0,|L1.728|
00024a  f7fffffe          BL       GPIO_Init
;;;232    }
00024e  bd08              POP      {r3,pc}
;;;233    
                          ENDP

                  DRDY_Pin_Value PROC
;;;234    uint8_t DRDY_Pin_Value(void)
000250  b510              PUSH     {r4,lr}
;;;235    {
;;;236       return(GPIO_ReadOutputDataBit(GPIOB, DRDY_PIN));      
000252  2120              MOVS     r1,#0x20
000254  4820              LDR      r0,|L1.728|
000256  f7fffffe          BL       GPIO_ReadOutputDataBit
;;;237    }
00025a  bd10              POP      {r4,pc}
;;;238    /************************************************************************
                          ENDP

                  Enable_Exti PROC
;;;251    ************************************************************************/
;;;252    void Enable_Exti(void)
00025c  b51f              PUSH     {r0-r4,lr}
;;;253    {
;;;254      NVIC_InitTypeDef NVIC_InitStructure;
;;;255      GPIO_InitTypeDef GPIO_InitStructure;
;;;256      EXTI_InitTypeDef EXTI_InitStructure;
;;;257      
;;;258       //enable GPIOC and AFIO clock
;;;259      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO,ENABLE);       //change this for other port
00025e  2101              MOVS     r1,#1
000260  2011              MOVS     r0,#0x11
000262  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;260      
;;;261      
;;;262     //inital GPIO
;;;263      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;               //change this for other pin
000266  2001              MOVS     r0,#1
000268  f8ad0008          STRH     r0,[sp,#8]
;;;264    
;;;265      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
00026c  2048              MOVS     r0,#0x48
00026e  f88d000b          STRB     r0,[sp,#0xb]
;;;266      
;;;267      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000272  2001              MOVS     r0,#1
000274  f88d000a          STRB     r0,[sp,#0xa]
;;;268    
;;;269      GPIO_Init(GPIOC, &GPIO_InitStructure);                  //change this for other port
000278  a902              ADD      r1,sp,#8
00027a  481a              LDR      r0,|L1.740|
00027c  f7fffffe          BL       GPIO_Init
;;;270      
;;;271      // configure GPIO as interrput
;;;272      GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource0);  //change this for other port and other pin
000280  2100              MOVS     r1,#0
000282  2002              MOVS     r0,#2
000284  f7fffffe          BL       GPIO_EXTILineConfig
;;;273      
;;;274      
;;;275    
;;;276      EXTI_InitStructure.EXTI_Line = EXTI_Line0;
000288  2001              MOVS     r0,#1
00028a  9000              STR      r0,[sp,#0]
;;;277    
;;;278      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
00028c  2000              MOVS     r0,#0
00028e  f88d0004          STRB     r0,[sp,#4]
;;;279    
;;;280      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; // falling edge trigger interrupt
000292  200c              MOVS     r0,#0xc
000294  f88d0005          STRB     r0,[sp,#5]
;;;281    
;;;282      EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000298  2001              MOVS     r0,#1
00029a  f88d0006          STRB     r0,[sp,#6]
;;;283    
;;;284      EXTI_Init(&EXTI_InitStructure);
00029e  4668              MOV      r0,sp
0002a0  f7fffffe          BL       EXTI_Init
;;;285      
;;;286      /* Configure one bit for preemption priority */
;;;287      
;;;288      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
0002a4  f44f60c0          MOV      r0,#0x600
0002a8  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;289    
;;;290      NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;                        //change this for other pin
0002ac  2006              MOVS     r0,#6
0002ae  f88d000c          STRB     r0,[sp,#0xc]
;;;291    
;;;292      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
0002b2  2000              MOVS     r0,#0
0002b4  f88d000d          STRB     r0,[sp,#0xd]
;;;293    
;;;294      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0002b8  f88d000e          STRB     r0,[sp,#0xe]
;;;295    
;;;296      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0002bc  2001              MOVS     r0,#1
0002be  f88d000f          STRB     r0,[sp,#0xf]
;;;297    
;;;298      NVIC_Init(&NVIC_InitStructure);
0002c2  a803              ADD      r0,sp,#0xc
0002c4  f7fffffe          BL       NVIC_Init
;;;299    }
0002c8  bd1f              POP      {r0-r4,pc}
;;;300    
                          ENDP

                  EnterCriticalSection_UserCallback PROC
;;;302    #ifdef USE_DEFAULT_CRITICAL_CALLBACK
;;;303    void EnterCriticalSection_UserCallback(void)
0002ca  b672              CPSID    i
;;;304     {
;;;305       __disable_irq();  
;;;306     }
0002cc  4770              BX       lr
;;;307    void ExitCriticalSection_UserCallback(void)
                          ENDP

                  ExitCriticalSection_UserCallback PROC
0002ce  b662              CPSIE    i
;;;308     {
;;;309       __enable_irq();
;;;310     }
0002d0  4770              BX       lr
;;;311    #endif
                          ENDP

0002d2  0000              DCW      0x0000
                  |L1.724|
                          DCD      0x40010800
                  |L1.728|
                          DCD      0x40010c00
                  |L1.732|
                          DCD      0x40013000
                  |L1.736|
                          DCD      TIMEOUT
                  |L1.740|
                          DCD      0x40011000

                          AREA ||.data||, DATA, ALIGN=2

                  TIMEOUT
                          DCD      0x0000a000

;*** Start embedded assembler ***

#line 1 "..\\bsp_lib\\stm32_spi.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_stm32_spi_c_TIMEOUT____REV16|
#line 129 "E:\\keli\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_stm32_spi_c_TIMEOUT____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_stm32_spi_c_TIMEOUT____REVSH|
#line 144
|__asm___11_stm32_spi_c_TIMEOUT____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
