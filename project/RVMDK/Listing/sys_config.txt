; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\sys_config.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\sys_config.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IE:\keli\ARM\RV31\INC -IE:\keli\ARM\CMSIS\Include -IE:\keli\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\sys_config.crf ..\bsp_lib\sys_config.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;31     *******************************************************************************************/
;;;32     void RCC_Configuration(void) 
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34     	/* RCC system reset(for debug purpose) */
;;;35       	RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;36     
;;;37       	/* Enable HSE */
;;;38       	RCC_HSEConfig(RCC_HSE_ON);
000006  f44f3080          MOV      r0,#0x10000
00000a  f7fffffe          BL       RCC_HSEConfig
;;;39     
;;;40       	/* Wait till HSE is ready */
;;;41       	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
00000e  bf00              NOP      
                  |L1.16|
000010  2031              MOVS     r0,#0x31
000012  f7fffffe          BL       RCC_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0fa              BEQ      |L1.16|
;;;42     
;;;43         /* Enable Prefetch Buffer */
;;;44         FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;45     
;;;46         /* Flash 2 wait state */
;;;47         FLASH_SetLatency(FLASH_Latency_2);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       FLASH_SetLatency
;;;48      
;;;49         /* HCLK = SYSCLK */
;;;50         RCC_HCLKConfig(RCC_SYSCLK_Div1);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       RCC_HCLKConfig
;;;51       
;;;52         /* PCLK2 = HCLK */
;;;53         RCC_PCLK2Config(RCC_HCLK_Div1);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       RCC_PCLK2Config
;;;54     
;;;55         /* PCLK1 = HCLK/2 */
;;;56         RCC_PCLK1Config(RCC_HCLK_Div2);
000032  f44f6080          MOV      r0,#0x400
000036  f7fffffe          BL       RCC_PCLK1Config
;;;57     
;;;58         /* PLLCLK = 8MHz * 9 = 72 MHz */
;;;59         RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
00003a  f44f11e0          MOV      r1,#0x1c0000
00003e  f44f3080          MOV      r0,#0x10000
000042  f7fffffe          BL       RCC_PLLConfig
;;;60     
;;;61         /* Enable PLL */ 
;;;62         RCC_PLLCmd(ENABLE);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       RCC_PLLCmd
;;;63     
;;;64         /* Wait till PLL is ready */
;;;65         while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
00004c  bf00              NOP      
                  |L1.78|
00004e  2039              MOVS     r0,#0x39
000050  f7fffffe          BL       RCC_GetFlagStatus
000054  2800              CMP      r0,#0
000056  d0fa              BEQ      |L1.78|
;;;66     
;;;67         /* Select PLL as system clock source */
;;;68         RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       RCC_SYSCLKConfig
;;;69     
;;;70         /* Wait till PLL is used as system clock source */
;;;71         while(RCC_GetSYSCLKSource() != 0x08);
00005e  bf00              NOP      
                  |L1.96|
000060  f7fffffe          BL       RCC_GetSYSCLKSource
000064  2808              CMP      r0,#8
000066  d1fb              BNE      |L1.96|
;;;72     }
000068  bd10              POP      {r4,pc}
;;;73     
                          ENDP

                  NVIC_Configuration PROC
;;;74     void NVIC_Configuration(void)
00006a  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	#ifdef  VECT_TAB_RAM  
;;;77     	  /* Set the Vector Table base location at 0x20000000 */ 
;;;78     	  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
;;;79     	#else  /* VECT_TAB_FLASH  */
;;;80     	  /* Set the Vector Table base location at 0x08000000 */ 
;;;81     	  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
00006c  2100              MOVS     r1,#0
00006e  f04f6000          MOV      r0,#0x8000000
000072  f7fffffe          BL       NVIC_SetVectorTable
;;;82     	#endif	
;;;83     }
000076  bd10              POP      {r4,pc}
;;;84     
                          ENDP

                  GPIO_Configuration PROC
;;;85     void GPIO_Configuration(void)
000078  4770              BX       lr
;;;86     {
;;;87     	
;;;88     }
;;;89     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\bsp_lib\\sys_config.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_sys_config_c_e3831934____REV16|
#line 129 "E:\\keli\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_sys_config_c_e3831934____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_sys_config_c_e3831934____REVSH|
#line 144
|__asm___12_sys_config_c_e3831934____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
